@using Framework.Mvc;
@model MSBuildLogsExtended.AspNetMvc40ViewModel.WPEntityRelatedOfSolutionVM
@{
    // http://www.asp.net/mvc/overview/getting-started/getting-started-with-ef-using-mvc/sorting-filtering-and-paging-with-the-entity-framework-in-an-asp-net-mvc-application
    // http://dotnetmentors.com/mvc/paging-and-sorting-in-asp-net-mvc-and-entity-framework-application.aspx
    ViewBag.Title = MSBuildLogsExtended.Resources.UIStringResourcePerEntitySolution.Solution;
    RouteValueDictionary queryStringDictionary = new RouteValueDictionary(Request.QueryString.AllKeys.ToDictionary(key => key, key => (object)Request.QueryString[key]));
}
@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h1>@ViewBag.Title.</h1>
                <h2>@ViewBag.Message</h2>
            </hgroup>
        </div>
    </section>
}
<article>
<div class="default">
<div><h2>@Html.ActionLink(MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuild.Build, "WPCommonOfBuild", "Build")</h2></div>
<div>
<table id="MasterDataControl0" name="MasterDataControl0" >
<tr><th class="sorting"></th>
<th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuild.Solution_S1_1_Name</th>
<th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuild.Name</th>
<th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuild.Description</th>
<th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuild.BuildStartTime</th>
<th class="sorting"></th></tr>
    @if (Model != null && Model.StatusOfFK_Build_Solution == Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK)
    {
		int index = 0;
        foreach (var item in Model.FK_Build_Solution)
        {
			index++;
<tr><td ></td>
<td >@Html.ActionLink(item.Solution_S1_1_Name, "WPEntityRelatedOfSolution", "Solution", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.SolutionId }, null)</td>
<td >@Html.DisplayFor(modelItem => item.Name)</td>
<td >@Html.DisplayFor(modelItem => item.Description)</td>
<td >@Html.DisplayFor(modelItem => item.BuildStartTime)</td>
<td ><div class="contextMenu-buttonContainer">
<input onclick="location.href='@Url.Action("WPEntityRelatedOfBuild", "Build", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.Id })'" class="button button-Details" type="button" name="DetailsToolBarRightInList" value="@Framework.Resources.UIStringResource.DetailsAlternativeText" />
<input onclick="location.href='@Url.Action("Edit", "Build", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.Id })'" class="button button-Edit" type="button" name="EditToolBarRightInList" value="@Framework.Resources.UIStringResource.EditAlternativeText" />
</div></td></tr>
        }
    }
    else
    {
<tr><td colspan="50" ><div class="error-label">@Model.StatusMessageOfFK_Build_Solution</div></td></tr>
    }
</table>
</div>
</div>
</article>
<aside>
<label class="no-toggle-box">@MSBuildLogsExtended.Resources.UIStringResourcePerEntitySolution.Solution</label>
<div class="default">
@if (Model.StatusOfMasterEntity == Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK)
{ // Item
<div class="aside-buttonContainer">
<input onclick="location.href='@Url.Action("Edit", "Solution", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = Model.MasterEntity.Id })'" class="aside-button aside-button-Edit" type="button" name="EditToolBarUp" value="@Framework.Resources.UIStringResource.EditAlternativeText" />
<input onclick="location.href='@Url.Action("AddNew", "Solution")'" class="aside-button aside-button-AddNew" type="button" name="AddNewToolBarUp" value="@Framework.Resources.UIStringResource.AddNewAlternativeText" />
<input onclick="location.href='@Url.Action("Copy", "Solution", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = Model.MasterEntity.Id })'" class="aside-button aside-button-Copy" type="button" name="CopyToolBarUp" value="@Framework.Resources.UIStringResource.CopyAlternativeText" />
<input onclick="location.href='@Url.Action("Details", "Solution", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = Model.MasterEntity.Id })'" class="aside-button aside-button-Details" type="button" name="DetailsToolBarUp" value="@Framework.Resources.UIStringResource.DetailsAlternativeText" />
<input onclick="location.href='@Url.Action("Index", "Solution")'" class="aside-button aside-button-GotoSearch" type="button" name="GotoSearchToolBarUp" value="@Framework.Resources.UIStringResource.GotoSearchAlternativeText" />
</div>
<div class="aside-display-label">
			@Html.LabelFor(model => model.MasterEntity.Id)
        </div>
        <div class="aside-display-field">
			@Html.DisplayFor(model => model.MasterEntity.Id)
        </div>
<div class="aside-display-label">
			@Html.LabelFor(model => model.MasterEntity.ExternalParentId)
        </div>
        <div class="aside-display-field">
			@Html.DisplayFor(model => model.MasterEntity.ExternalParentId)
        </div>
<div class="aside-display-label">
			@Html.LabelFor(model => model.MasterEntity.Name)
        </div>
        <div class="aside-display-field">
			@Html.DisplayFor(model => model.MasterEntity.Name)
        </div>
<div class="aside-display-label">
			@Html.LabelFor(model => model.MasterEntity.Description)
        </div>
        <div class="aside-display-field">
			@Html.DisplayFor(model => model.MasterEntity.Description)
        </div>
}
@if (Model.StatusOfMasterEntity != Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.UIProcessReady && Model.StatusOfMasterEntity != Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK)
{
<div class="aside-buttonContainer">
<input onclick="location.href='@Url.Action("AddNew", "Solution")'" class="aside-button aside-button-AddNew" type="button" name="AddNewToolBarUp" value="@Framework.Resources.UIStringResource.AddNewAlternativeText" />
<input onclick="location.href='@Url.Action("WPEntityRelatedOfSolution", "Solution", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = Model.MasterEntity.Id })'" class="aside-button aside-button-Details" type="button" name="DetailsToolBarUp" value="@Framework.Resources.UIStringResource.DetailsAlternativeText" />
<input onclick="location.href='@Url.Action("Index", "Solution")'" class="aside-button aside-button-GotoSearch" type="button" name="GotoSearchToolBarUp" value="@Framework.Resources.UIStringResource.GotoSearchAlternativeText" />
</div>
<div class="error-label">@Model.StatusMessageOfMasterEntity</div>
}
</div>
</aside>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/dataTables")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        //http://www.softfinity.com/blog/using-ajax-with-knockout-js-and-asp-net-mvc-4-to-load-select-drop-down-options/
        $(document).ready($(function() {
        }));
        $(document).ready($(function() {
            $.validator.addMethod(
                "date",
                function(value, element) {
                    var bits = value.match(/([0-9]+)/gi), str;
                    if (!bits)
                        return this.optional(element) || false;
                    str = bits[1] + '/' + bits[0] + '/' + bits[2];
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(str));
                },
                "Please enter a date in the format dd/mm/yyyy"
            );
            $("form").validate({
                onkeyup: false,
                errorPlacement: function(error, element) {
                    if (element.attr("name").indexOf("DOB") >= 0) {
                        error.insertAfter("#DOB_Day");
                    } else {
                        error.insertAfter(element);
                    }
                },
                rules: {
                },
                messages: {
                },
                highlight:
                    function(element) {
                        $(element).css('border', '2px solid red');
                    },
                unhighlight:
                    function(element) {
                        $(element).css('border', '1px solid rgb(170, 170, 170)');
                    },
                errorLabelContainer: "#ErrorList",
                wrapper: "li",
            });
        }));
        //cascaded dropdownlist by knockoutjs
        function CascadingDDLViewModel() {
            var self = this;
        }
        $(document).ready($(function() {
            var objVM = new CascadingDDLViewModel();
            ko.applyBindings(objVM);
        }));
    </script>
}
