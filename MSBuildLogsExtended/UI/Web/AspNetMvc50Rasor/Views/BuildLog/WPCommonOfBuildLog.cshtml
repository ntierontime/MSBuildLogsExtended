@using UrlStringsAlias = MSBuildLogsExtended.AspNetMvc50Rasor.Helpers.UrlStrings;
@using Framework.Mvc;
@model MSBuildLogsExtended.AspNetMvc40ViewModel.WPCommonOfBuildLogVM
@{
    // http://www.asp.net/mvc/overview/getting-started/getting-started-with-ef-using-mvc/sorting-filtering-and-paging-with-the-entity-framework-in-an-asp-net-mvc-application
    // http://dotnetmentors.com/mvc/paging-and-sorting-in-asp-net-mvc-and-entity-framework-application.aspx
    ViewBag.Title = MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.BuildLog;
    RouteValueDictionary queryStringDictionary = new RouteValueDictionary(Request.QueryString.AllKeys.ToDictionary(key => key, key => (object)Request.QueryString[key]));
}
@section featured {
<div class="row">
    <div class="col-xs-12">
        <div class="page-header">
			<h1>@ViewBag.Title.<small>@ViewBag.Message</small></h1>
        </div>
    </div>
</div>
}
<article>
<div>
<div class="col-sm-12 col-md-3">
    <div class="panel panel-default">
        <div class="panel-heading">
            <h3 class="panel-title">Filter</h3>
        </div>
        <div class="panel-body">
@using (Html.BeginForm()){
            <div class="panel-heading">
				<h3 class="panel-title">Filter</h3>
		<input class="btn btn-default btn-Search" type="submit" name="SearchToolBarUp" value="@Framework.Resources.UIStringResource.SearchAlternativeText" />
		<input onclick="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_AddNew, UrlStringsAlias.ControllerName_BuildLog)'" class="btn btn-default btn-AddNew" role="button" type="button" name="AddNewToolBarUp" value="@Framework.Resources.UIStringResource.AddNewAlternativeText" />
<input onclick="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_WPCommonOfBuildLog_Export, UrlStringsAlias.ControllerName_BuildLog, new RouteValueDictionary { { "dataServiceType", "Csv" } })'" class="btn btn-default btn-Export" role="button" type="button" name="ExportToolBarUp" value="@Framework.Resources.UIStringResource.ExportAlternativeText" />
<input onclick="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_WPCommonOfBuildLog_Export, UrlStringsAlias.ControllerName_BuildLog, new RouteValueDictionary { { "dataServiceType", "Excel2010" } })'" class="btn btn-default btn-ExportToExcel" role="button" type="button" name="ExportToExcelToolBarUp" value="@Framework.Resources.UIStringResource.ExportToExcelAlternativeText" />
		<input onclick="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_Import, UrlStringsAlias.ControllerName_BuildLog)'" class="btn btn-default btn-Import" role="button" type="button" name="ImportToolBarUp" value="@Framework.Resources.UIStringResource.ImportAlternativeText" />
            </div>
			<div class="panel-body">
 <div class="form-group">
</div>
<div class="form-group">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareMessageCommonOftOfCommon, new { style="display:display;", @class="form-control" })@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompare_ID_CheckBox_Search_isToCompareMessageCommonOftOfCommon
@Html.TextBoxFor(model=>model.Criteria.ValueToBeContainedMessageCommonOftOfCommon, new { @class = "form-control" })
</div>
<div class="form-group">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareEventTimeCommonOftOfCommon, new { style="display:display;", @class="form-control" })@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompare_ID_CheckBox_Search_isToCompareEventTimeCommonOftOfCommon<input type="text" rangepickername="datefilter" value=" class="form-control" />
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareLowerBoundEventTimeCommonOftOfCommon, new { style="display:display;", @class="form-control" })@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompareLowerBound_ID_CheckBox_Search_isToCompareLowerBoundEventTimeCommonOftOfCommon
@Html.TextBox("lowerBoundEventTimeCommonOftOfCommon", Model.Criteria.LowerBoundEventTimeCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareUpperBoundEventTimeCommonOftOfCommon, new { style="display:display;", @class="form-control" })@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompareUpperBound_ID_CheckBox_Search_isToCompareUpperBoundEventTimeCommonOftOfCommon
@Html.TextBox("upperBoundEventTimeCommonOftOfCommon", Model.Criteria.UpperBoundEventTimeCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
</div>
<div class="form-group">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareIdCommonOfBuildEventCode_1OfCommon, new { style="display:display;", @class="form-control" })@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompare_ID_CheckBox_Search_isToCompareIdCommonOfBuildEventCode_1OfCommon
@Html.DropDownListFor(model => model.Criteria.ValueToCompareIdCommonOfBuildEventCode_1OfCommon, (List<SelectListItem>)Model.SelectListOfMSBuildLogsExtended_BuildEventCode, MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildEventCode.Please_select_BuildEventCode____, new Dictionary<string,Object>{ { "class", "form-control" } })
</div>
<div class="form-group">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareIdCommonOfSolution_1OfCommon, new { style="display:display;", @class="form-control" })@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompare_ID_CheckBox_Search_isToCompareIdCommonOfSolution_1OfCommon
@Html.DropDownListFor(model => model.Criteria.ValueToCompareIdCommonOfSolution_1OfCommon, (List<SelectListItem>)Model.SelectListOfMSBuildLogsExtended_Solution, MSBuildLogsExtended.Resources.UIStringResourcePerEntitySolution.Please_select_Solution____, new Dictionary<string,Object>{ { "class", "form-control" }, { "onchange", "FetchBuild_1();" } })
</div>
<div class="form-group">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareIdCommonOfBuild_1OfCommon, new { style="display:display;", @class="form-control" })@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompare_ID_CheckBox_Search_isToCompareIdCommonOfBuild_1OfCommon
@Html.DropDownListFor(model => model.Criteria.ValueToCompareIdCommonOfBuild_1OfCommon, Enumerable.Empty<SelectListItem>(), MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuild.Please_select_Build____, new Dictionary<string,Object>{ { "class", "form-control" }, { "data-bind", string.Format(@"options:selectListOfvalueToCompareIdCommonOfBuild_1OfCommon,optionsCaption:'{0}',optionsText:'name',optionsValue:'value',value:selectedvalueToCompareIdCommonOfBuild_1OfCommon", MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuild.Please_select_Build____) } })
</div>
<div class="form-group form-inline">
    <span>Items per page : </span>
	@Html.DropDownListFor(model => model.QueryPagingSetting.PageSize, Model.SelectListOfPageSize, new Dictionary<string, Object> { { "class", "form-control" }, { "onchange", "this.form.submit();" } })
	<span>Sort by:</span>
    @Html.DropDownListFor(model => model.QueryOrderBySettingCollecionInString, Model.SelectListOfQueryOrderBySettingCollecionInString, new Dictionary<string, Object> { { "class", "form-control" }, { "onchange", "this.form.submit();" } })
    @Model.QueryPagingSetting.GetPagingInformationString()>
</div>
            </div>
			<div class="panel-footer">
		<input class="btn btn-default btn-Search" type="submit" name="SearchToolBarBottom" value="@Framework.Resources.UIStringResource.SearchAlternativeText" />
		<input onclick="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_AddNew, UrlStringsAlias.ControllerName_BuildLog)'" class="btn btn-default btn-AddNew" role="button" type="button" name="AddNewToolBarBottom" value="@Framework.Resources.UIStringResource.AddNewAlternativeText" />
<input onclick="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_WPCommonOfBuildLog_Export, UrlStringsAlias.ControllerName_BuildLog, new RouteValueDictionary { { "dataServiceType", "Csv" } })'" class="btn btn-default btn-Export" role="button" type="button" name="ExportToolBarBottom" value="@Framework.Resources.UIStringResource.ExportAlternativeText" />
<input onclick="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_WPCommonOfBuildLog_Export, UrlStringsAlias.ControllerName_BuildLog, new RouteValueDictionary { { "dataServiceType", "Excel2010" } })'" class="btn btn-default btn-ExportToExcel" role="button" type="button" name="ExportToExcelToolBarBottom" value="@Framework.Resources.UIStringResource.ExportToExcelAlternativeText" />
		<input onclick="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_Import, UrlStringsAlias.ControllerName_BuildLog)'" class="btn btn-default btn-Import" role="button" type="button" name="ImportToolBarBottom" value="@Framework.Resources.UIStringResource.ImportAlternativeText" />
            </div>
}
        </div>
    </div>
</div>
@Html.PagedListPager(pagedResult, currentPage => Url.Action(UrlStringsAlias.ActionName_BuildLog_WPCommonOfBuildLog, new { currentPage = currentPage }), PagedListRenderOptions.OnlyShowFivePagesAtATime)
    <div class="table-responsive">
<table id="MasterDataControl0" name="MasterDataControl0" class="table table-hover">
 <tr><th class="sorting"></th>
<th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.Build_1_Name</th>
<th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.Solution_1_Name</th>
<th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.BuildEventCode_1_Name</th>
<th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.Message</th>
<th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.EventTime</th>
<th class="sorting"></th></tr>
    @if (Model != null && Model.StatusOfResult == Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK)
    {
		int index = 0;
        foreach (var item in Model.Result)
        {
			index++;
<tr><td ></td>
<td >@Html.ActionLink(item.Build_1_Name, UrlStringsAlias.ActionName_Build_WPEntityRelatedOfBuild, UrlStringsAlias.ControllerName_Build, new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.BuildId }, null)</td>
<td >@Html.ActionLink(item.Solution_1_Name, UrlStringsAlias.ActionName_Solution_WPEntityRelatedOfSolution, UrlStringsAlias.ControllerName_Solution, new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.Solution_1Id }, null)</td>
<td >@Html.ActionLink(item.BuildEventCode_1_Name, UrlStringsAlias.ActionName_BuildEventCode_WPEntityRelatedOfBuildEventCode, UrlStringsAlias.ControllerName_BuildEventCode, new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.BuildEventCodeId }, null)</td>
<td >@Html.DisplayFor(modelItem => item.Message)</td>
<td >@Html.DisplayFor(modelItem => item.EventTime)</td>
<td ><div class="btn-group">
<input onclick="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_WPEntityRelatedOfBuildLog, UrlStringsAlias.ControllerName_BuildLog, new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.Id })'" class="btn btn-default btn-FullDetails" role="button" type="button" name="DetailsToolBarRightInList" value="@Framework.Resources.UIStringResource.DetailsAlternativeText" />
		<input onclick="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_Edit, UrlStringsAlias.ControllerName_BuildLog, new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.Id })'" class="btn btn-default btn-Edit" role="button" type="button" name="EditToolBarRightInList" value="@Framework.Resources.UIStringResource.EditAlternativeText" />
</div></td></tr>
        }
    }
    else
    {
<tr><td colspan="50" ><div class="error-label">@Model.StatusMessageOfResult</div>
</td></tr>
    }
</table>
    </div>
    @Html.PagedListPager(pagedResult, currentPage => Url.Action(UrlStringsAlias.ActionName_BuildLog_WPCommonOfBuildLog, new { currentPage = currentPage }), PagedListRenderOptions.OnlyShowFivePagesAtATime)
</div>
</article>
@section Scripts {
    <script type="text/javascript">
        //http://www.softfinity.com/blog/using-ajax-with-knockout-js-and-asp-net-mvc-4-to-load-select-drop-down-options/
        $(document).ready($(function() {
            $('input[name=upperBoundEventTimeCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            $('input[name=lowerBoundEventTimeCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            // Daterangepicker init
            $(function() {
                $('input[rangepickername="datefilter"]').daterangepicker({
                    autoUpdateInput: false,
                    locale: {
                                cancelLabel: 'Clear'
                            },
                    ranges: {
                               'Today': [moment(), moment()],
                               'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                               'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                               'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                               'This Month': [moment().startOf('month'), moment().endOf('month')],
                               'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                            }
                });
                $('input[rangepickername="datefilter"]').on('apply.daterangepicker', function(ev, picker) {
                    var filterCheckbox = $(this).siblings(".input-group-addon").children('input');
                    if (filterCheckbox.prop( "checked", false )) {
                        filterCheckbox.trigger('click');
                    }
                    $(this).val(picker.startDate.format('MM/DD/YYYY') + ' - ' + picker.endDate.format('MM/DD/YYYY'));
                    $(this).next().children("input:text").first().val(picker.startDate.format('MM/DD/YYYY'));
                    $(this).next().children("input:text").last().val(picker.endDate.format('MM/DD/YYYY'));
                });
                $('input[rangepickername="datefilter"]').on('cancel.daterangepicker', function(ev, picker) {
                    $(this).val('');
                    var filterCheckbox = $(this).siblings(".input-group-addon").children('input');
                    if (filterCheckbox.prop( "checked" )) {
                        filterCheckbox.trigger('click');
                    }
                    $(this).next().children("input:text").first().val(picker.startDate.format('MM/DD/YYYY'));
                    $(this).next().children("input:text").last().val(picker.endDate.format('MM/DD/YYYY'));
                });
                // Set daterange to reflect hidden inputs
                $('input[rangepickername="datefilter"]').each(function(){
                    var startDate = $(this).next().children("input:text").first().val()
                    var endDate = $(this).next().children("input:text").last().val()
                    if (startDate != '1/1/0001 12:00:00 AM') {
                        $(this).data('daterangepicker').setStartDate( startDate );
                    }
                    if (endDate != '1/1/0001 12:00:00 AM') {
                        $(this).data('daterangepicker').setEndDate( endDate );
                    }
                });
            });
        }));
        $(document).ready($(function() {
            $.validator.addMethod(
                "date",
                function(value, element) {
                    var bits = value.match(/([0-9]+)/gi), str;
                    if (!bits)
                        return this.optional(element) || false;
                    str = bits[1] + '/' + bits[0] + '/' + bits[2];
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(str));
                },
                "Please enter a date in the format dd/mm/yyyy"
            );
            $("form").validate({
                onkeyup: false,
                errorPlacement: function(error, element) {
                    if (element.attr("name").indexOf("DOB") >= 0) {
                        error.insertAfter("#DOB_Day");
                    } else {
                        error.insertAfter(element);
                    }
                },
                rules: {
                    upperBoundEventTimeCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    },
                    lowerBoundEventTimeCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    },
                },
                messages: {
                    upperBoundEventTimeCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    },
                    lowerBoundEventTimeCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    },
                },
                highlight:
                    function(element) {
                        $(element).css('border', '2px solid red');
                    },
                unhighlight:
                    function(element) {
                        $(element).css('border', '1px solid rgb(170, 170, 170)');
                    },
                errorLabelContainer: "#ErrorList",
                wrapper: "li",
            });
        }));
        function FetchBuild_1() {
			var selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly = $("#Criteria_ValueToCompareIdCommonOfSolution_1OfCommon").val();
            var url = "/api/BuildApi/GetCollectionOfNameValuePairOfByFKOnly";
            var params = BuildCriteriaForFetchBuild_1(selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly);
            if(selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly)
            {
                $.getJSON(url, params, function (data) {
                    objVM.selectListOfvalueToCompareIdCommonOfBuild_1OfCommon(data);
                    if(0 != @(Model.Criteria.ValueToCompareIdCommonOfBuild_1OfCommon.HasValue ? Model.Criteria.ValueToCompareIdCommonOfBuild_1OfCommon.Value : default(System.Int64)))
                    {
                        objVM.selectedvalueToCompareIdCommonOfBuild_1OfCommon(@Model.Criteria.ValueToCompareIdCommonOfBuild_1OfCommon);
                    }
                });
            }
        }
        function BuildCriteriaForFetchBuild_1(selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly) {
            var params = {
                isToCompareIdByFKOnlyOfSolution_1OfByFKOnly: true,
                valueToCompareIdByFKOnlyOfSolution_1OfByFKOnly: selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly,
                currentIndex: -1,
                pageSize: -1,
                queryOrderByExpression: null
            };
            return params;
        }
        //cascaded dropdownlist by knockoutjs
        function CascadingDDLViewModel() {
            var self = this;
            self.selectListOfvalueToCompareIdCommonOfBuild_1OfCommon = ko.observableArray([]);
            self.selectedvalueToCompareIdCommonOfBuild_1OfCommon = ko.observable();
        }
        $(document).ready($(function() {
            var objVM = new CascadingDDLViewModel();
            ko.applyBindings(objVM);
$("#Criteria_ValueToCompareValueToCompareIdCommonOfSolution_1OfCommon").change();
        }));
    </script>
}
