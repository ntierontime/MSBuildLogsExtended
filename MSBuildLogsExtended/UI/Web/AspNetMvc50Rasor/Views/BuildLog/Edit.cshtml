@using UrlStringsAlias = MSBuildLogsExtended.AspNetMvc50Rasor.Helpers.UrlStrings;
@model MSBuildLogsExtended.AspNetMvc40ViewModel.BuildLogItemVM
<div class="row">
    <div class="col-sm-12 col-md-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h2>@Model.ContentData.Title.</h2>
                <h4>@Model.ContentData.Summary</h4>
            </div>
            <div class="panel-body">
@if (Model.StatusOfResult != Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK && Model.StatusOfResult != Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.UIProcessReady)
{
	<div class="text-danger">@Model.StatusMessageOfResult</div>
}
@using (Html.BeginForm(UrlStringsAlias.ActionName_BuildLog_Edit, UrlStringsAlias.ControllerName_BuildLog, FormMethod.Post, new { @class= "form" })) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
@Html.HiddenFor(model => model.Item.Build_1_Name)@Html.HiddenFor(model => model.Item.Id)  <div class="form-group form-inline">
			@Html.LabelFor(model => model.Item.Solution_1Id, new { @class = "control-label" })
			@Html.DropDownListFor(model => model.Item.Solution_1Id, (List<SelectListItem>)ViewBag.SelectListOfMSBuildLogsExtended_Solution, MSBuildLogsExtended.Resources.UIStringResourcePerEntitySolution.Please_select_Solution____, new Dictionary<string,Object>{ { "onchange", "FetchBuild_1();" }, { "class", "form-control" } })
    </div>
@Html.HiddenFor(model => model.Item.Solution_1_Name)@Html.HiddenFor(model => model.Item.BuildEventCode_1_Name)  <div class="form-group form-inline">
			@Html.LabelFor(model => model.Item.BuildId, new { @class = "control-label" })
			@Html.DropDownListFor(model => model.Item.BuildId, Enumerable.Empty<SelectListItem>(), MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuild.Please_select_Build____, new Dictionary<string,Object>{ { "class", "form-control" }, { "data-bind", string.Format(@"options:selectListOfBuildId,optionsCaption:'{0}',optionsText:'name',optionsValue:'value',value:selectedBuildId", MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuild.Please_select_Build____) } })
    </div>
  <div class="form-group form-inline">
			@Html.LabelFor(model => model.Item.BuildEventCodeId, new { @class = "control-label" })
			@Html.DropDownListFor(model => model.Item.BuildEventCodeId, (List<SelectListItem>)ViewBag.SelectListOfMSBuildLogsExtended_BuildEventCode, MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildEventCode.Please_select_BuildEventCode____, new Dictionary<string,Object>{ { "class", "form-control" } })
    </div>
  <div class="form-group form-inline">
			@Html.LabelFor(model => model.Item.Message, new { @class = "control-label" })
			@Html.TextBoxFor(model => model.Item.Message, new { @class = "form-control" })
			@Html.ValidationMessageFor(model => model.Item.Message, null, new { @class = "text-danger" })
    </div>
  <div class="form-group form-inline">
			@Html.LabelFor(model => model.Item.EventTime, new { @class = "control-label" })
			@Html.TextBoxFor(model => model.Item.EventTime, new { @Value = Model.Item.EventTime.ToString("dd/MM/yyyy"), @class = "form-control" })
			@Html.ValidationMessageFor(model => model.Item.EventTime, null, new { @class = "text-danger" })
    </div>
                <div class="col-xs-12 col-sm-12 col-md-5 col-lg-5 pull-right nopadding">
                    <div class="btn-group btn-group-justified" role="group" aria-label="...">
                        <div class="btn-group">
							<button class="btn btn-primary" role="button" type="submit">
								<span class="glyphicon glyphicon-ok-sign"></span>
								<span class="submit-text hidden-xs hidden-sm visible-md-inline visible-lg-inline">@Framework.Resources.UIStringResource.SaveAlternativeText</span>
							</button>
                        </div>
                        <div class="btn-group">
							<a href="@Url.Action(UrlStringsAlias.ActionName_BuildLog_Edit, new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = Model.Item.Id })" class="btn btn-default" role="button" type="button">
								<span class="glyphicon glyphicon-refresh"></span><span class="hidden-xs hidden-sm visible-md-inline visible-lg-inline">@Framework.Resources.UIStringResource.RefreshAlternativeText</span>
							</a>
                        </div>
                        <div class="btn-group">
							<a href="@Url.Action(UrlStringsAlias.ActionName_BuildLog_Index)" class="btn btn-default" role="button" type="button">
								<span class="glyphicon glyphicon-ban-circle"></span><span class="hidden-xs hidden-sm visible-md-inline visible-lg-inline">@Framework.Resources.UIStringResource.BackAlternativeText</span>
							</a>
                        </div>
                    </div>
                </div>
}
            </div>
        </div>
    </div>
</div>
@section Scripts {
    <script type="text/javascript">
        //http://www.softfinity.com/blog/using-ajax-with-knockout-js-and-asp-net-mvc-4-to-load-select-drop-down-options/
        $(document).ready($(function() {
            $('input[name=EventTime]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
        }));
        $(document).ready($(function() {
            $.validator.addMethod(
                "date",
                function(value, element) {
                    var bits = value.match(/([0-9]+)/gi), str;
                    if (!bits)
                        return this.optional(element) || false;
                    str = bits[1] + '/' + bits[0] + '/' + bits[2];
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(str));
                },
                "Please enter a date in the format dd/mm/yyyy"
            );
            $("form").validate({
                onkeyup: false,
                errorPlacement: function(error, element) {
                    if (element.attr("name").indexOf("DOB") >= 0) {
                        error.insertAfter("#DOB_Day");
                    } else {
                        error.insertAfter(element);
                    }
                },
                rules: {
                },
                messages: {
                },
                highlight:
                    function(element) {
                        $(element).css('border', '2px solid red');
                    },
                unhighlight:
                    function(element) {
                        $(element).css('border', '1px solid rgb(170, 170, 170)');
                    },
                errorLabelContainer: "#ErrorList",
                wrapper: "li",
            });
        }));
        function FetchBuild_1() {
var selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly = $("#Solution_1Id").val();
            var url = "/api/BuildApi/GetCollectionOfNameValuePairOfByFKOnly";
            var params = BuildCriteriaForFetchBuild_1(selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly);
            if(selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly)
            {
                $.getJSON(url, params, function (data) {
                    objVM.selectListOfBuildId(data);
                    objVM.selectedBuildId(@Model.BuildId);
                });
            }
        }
        function BuildCriteriaForFetchBuild_1(selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly) {
            var params = {
                isToCompareIdByFKOnlyOfSolution_1OfByFKOnly: true,
                valueToCompareIdByFKOnlyOfSolution_1OfByFKOnly: selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly,
                currentIndex: -1,
                pageSize: -1,
                queryOrderByExpression: null
            };
            return params;
        }
        //cascaded dropdownlist by knockoutjs
        function CascadingDDLViewModel() {
            var self = this;
            self.selectListOfBuildId = ko.observableArray([]);
            self.selectedBuildId = ko.observable();
        }
        $(document).ready($(function() {
            var objVM = new CascadingDDLViewModel();
            ko.applyBindings(objVM);
$("#Solution_1Id").change();
        }));
    </script>
}
