@using UrlStringsAlias = MSBuildLogsExtended.AspNetMvc40Rasor.Helpers.UrlStrings;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Linq.Expressions;
@using System.Web.Mvc;
@using System.Web.Mvc.Html;
@using System.Web.Routing;
@using Framework.Mvc;
@using PagedList.Mvc;
@model MSBuildLogsExtended.AspNetMvc40ViewModel.WPCommonOfBuildLogVM
@{
    RouteValueDictionary queryStringDictionary = new RouteValueDictionary(Request.QueryString.AllKeys.ToDictionary(key => key, key => (object)Request.QueryString[key]));
}
 <div class="row">
 <div class="col-xs-12 col-sm-4 col-md-3 col-lg-3">
        @using (Html.BeginForm())
        {
            <div class="panel panel-default">
                <div class="panel-heading clearfix">
                    <h3 style="display: inline;">@Framework.Resources.UIStringResource.Common_Filter</h3>
                </div>
                <div class="panel-footer nopadding">
<div class="btn-group btn-group-justified" role="group" aria-label="...">
<div class="btn-group">
    <button class="btn btn-default" role="button" type="submit" name="SearchToolBarUp" title="@Framework.Resources.UIStringResource.SearchAlternativeText">
        <span class="glyphicon glyphicon-search"></span>
    </button>
</div>
<div class="btn-group">
	<a href="@Url.Action(UrlStringsAlias.ActionName_BuildLog_AddNew, UrlStringsAlias.ControllerName_BuildLog)" class="btn btn-default" role="button" type="button" name="AddNewToolBarUp" title="@Framework.Resources.UIStringResource.AddNewAlternativeText">
		<span class="glyphicon glyphicon-plus"></span>
	</a>
</div>
<div class="btn-group">
	<a href="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_WPCommonOfBuildLog_Export, UrlStringsAlias.ControllerName_BuildLog, new RouteValueDictionary { { "dataServiceType", "Csv" } })'" class="btn btn-default" role="button" type="button" name="ExportToolBarUp" title="@Framework.Resources.UIStringResource.ExportAlternativeText">
        <span class="glyphicon glyphicon-export"></span>
    </a>
</div>
<div class="btn-group">
	<a href="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_WPCommonOfBuildLog_Export, UrlStringsAlias.ControllerName_BuildLog, new RouteValueDictionary { { "dataServiceType", "Excel2010" } })'" class="btn btn-default" role="button" type="button" name="ExportToExcelToolBarUp" title="@Framework.Resources.UIStringResource.ExportToExcelAlternativeText">
        <span class="glyphicon glyphicon-export"></span>
    </a>
</div>
<div class="btn-group">
	<a href="@Url.Action(UrlStringsAlias.ActionName_BuildLog_Import, UrlStringsAlias.ControllerName_BuildLog)" class="btn btn-default" role="button" type="button" name="ImportToolBarUp" title="@Framework.Resources.UIStringResource.ImportAlternativeText">
		<span class="glyphicon glyphicon-import"></span>
	</a>
</div>
</div>
                </div>
                <div class="panel-body">
 <div class="form-group">
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareMessageCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompare_ID_CheckBox_Search_isToCompareMessageCommonOftOfCommon</label>
</div>
@Html.TextBoxFor(model=>model.Criteria.ValueToBeContainedMessageCommonOftOfCommon, new { @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareEventTimeCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompare_ID_CheckBox_Search_isToCompareEventTimeCommonOftOfCommon</label>
</div><input type="text" rangepickername="datefilter" value="" class="form-control" />
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareLowerBoundEventTimeCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompareLowerBound_ID_CheckBox_Search_isToCompareLowerBoundEventTimeCommonOftOfCommon</label>
</div>
@Html.TextBox("lowerBoundEventTimeCommonOftOfCommon", Model.Criteria.LowerBoundEventTimeCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareUpperBoundEventTimeCommonOftOfCommon, new { @class="styled" })<label class="control-label">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompareUpperBound_ID_CheckBox_Search_isToCompareUpperBoundEventTimeCommonOftOfCommon</label>
</div>
@Html.TextBox("upperBoundEventTimeCommonOftOfCommon", Model.Criteria.UpperBoundEventTimeCommonOftOfCommon.ToString(), new { @readonly = "readonly", @class = "form-control" })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareIdCommonOfBuildEventCode_1OfCommon, new { @class="styled" })<label class="control-label">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompare_ID_CheckBox_Search_isToCompareIdCommonOfBuildEventCode_1OfCommon</label>
</div>
@Html.DropDownListFor(model => model.Criteria.ValueToCompareIdCommonOfBuildEventCode_1OfCommon, (List<SelectListItem>)Model.SelectListOfMSBuildLogsExtended_BuildEventCode, MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildEventCode.Please_select_BuildEventCode____, new Dictionary<string,Object>{ { "class", "form-control" } })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareIdCommonOfSolution_1OfCommon, new { @class="styled" })<label class="control-label">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompare_ID_CheckBox_Search_isToCompareIdCommonOfSolution_1OfCommon</label>
</div>
@Html.DropDownListFor(model => model.Criteria.ValueToCompareIdCommonOfSolution_1OfCommon, (List<SelectListItem>)Model.SelectListOfMSBuildLogsExtended_Solution, MSBuildLogsExtended.Resources.UIStringResourcePerEntitySolution.Please_select_Solution____, new Dictionary<string,Object>{ { "class", "form-control" }, { "onchange", "FetchBuild_1();" } })
</div>
<div class="form-group">
<div class="checkbox checkbox-info">
@Html.CheckBoxFor(model=>model.Criteria.IsToCompareIdCommonOfBuild_1OfCommon, new { @class="styled" })<label class="control-label">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.IsToCompare_ID_CheckBox_Search_isToCompareIdCommonOfBuild_1OfCommon</label>
</div>
@Html.DropDownListFor(model => model.Criteria.ValueToCompareIdCommonOfBuild_1OfCommon, Enumerable.Empty<SelectListItem>(), MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuild.Please_select_Build____, new Dictionary<string,Object>{ { "class", "form-control" }, { "data-bind", string.Format(@"options:selectListOfvalueToCompareIdCommonOfBuild_1OfCommon,optionsCaption:'{0}',optionsText:'name',optionsValue:'value',value:selectedvalueToCompareIdCommonOfBuild_1OfCommon", MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuild.Please_select_Build____) } })
</div>
                    <div class="form-group form-inline">
                        <label class="control-label">Items per page : </label>
                        @Html.DropDownListFor(model => model.QueryPagingSetting.PageSize, Model.SelectListOfPageSize, new Dictionary<string, Object> { { "class", "form-control" }, { "onchange", "this.form.submit();" } })
                    </div>
                    <div class="form-group form-inline">
                        <label class="control-label">Sort by:</label>
                        @Html.DropDownListFor(model => model.QueryOrderBySettingCollecionInString, Model.SelectListOfQueryOrderBySettingCollecionInString, new Dictionary<string, Object> { { "class", "form-control" }, { "onchange", "this.form.submit();" } })
                    </div>
                </div>
                <div class="panel-footer nopadding">
<div class="btn-group btn-group-justified" role="group" aria-label="...">
<div class="btn-group">
    <button class="btn btn-default" role="button" type="submit" name="SearchToolBarBottom" title="@Framework.Resources.UIStringResource.SearchAlternativeText">
        <span class="glyphicon glyphicon-search"></span>
    </button>
</div>
<div class="btn-group">
	<a href="@Url.Action(UrlStringsAlias.ActionName_BuildLog_AddNew, UrlStringsAlias.ControllerName_BuildLog)" class="btn btn-default" role="button" type="button" name="AddNewToolBarBottom" title="@Framework.Resources.UIStringResource.AddNewAlternativeText">
		<span class="glyphicon glyphicon-plus"></span>
	</a>
</div>
<div class="btn-group">
	<a href="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_WPCommonOfBuildLog_Export, UrlStringsAlias.ControllerName_BuildLog, new RouteValueDictionary { { "dataServiceType", "Csv" } })'" class="btn btn-default" role="button" type="button" name="ExportToolBarBottom" title="@Framework.Resources.UIStringResource.ExportAlternativeText">
        <span class="glyphicon glyphicon-export"></span>
    </a>
</div>
<div class="btn-group">
	<a href="location.href='@Url.Action(UrlStringsAlias.ActionName_BuildLog_WPCommonOfBuildLog_Export, UrlStringsAlias.ControllerName_BuildLog, new RouteValueDictionary { { "dataServiceType", "Excel2010" } })'" class="btn btn-default" role="button" type="button" name="ExportToExcelToolBarBottom" title="@Framework.Resources.UIStringResource.ExportToExcelAlternativeText">
        <span class="glyphicon glyphicon-export"></span>
    </a>
</div>
<div class="btn-group">
	<a href="@Url.Action(UrlStringsAlias.ActionName_BuildLog_Import, UrlStringsAlias.ControllerName_BuildLog)" class="btn btn-default" role="button" type="button" name="ImportToolBarBottom" title="@Framework.Resources.UIStringResource.ImportAlternativeText">
		<span class="glyphicon glyphicon-import"></span>
	</a>
</div>
</div>
                </div>
            </div>
		}
 </div>
 <div class="col-xs-12 col-sm-8 col-md-9 col-lg-9 nopadding">
        <div class="panel panel-default">
            <div class="panel-heading clearfix">
                <h3 style="display: inline;">@Html.ActionLink(MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.BuildLog, "WPCommonOfBuildLog", "BuildLog")
            </div>
            <div class="table-responsive">
<table id="MasterDataControl1" name="MasterDataControl1" class="table table-hover table-bordered table-striped">
<thead>
 <tr><th  class="hidden-xs visible-sm"></th>
<th >@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.Build_1_Name</th>
<th >@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.Solution_1_Name</th>
<th >@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.BuildEventCode_1_Name</th>
<th  class="hidden-xs visible-smvisible-md visible-lg">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.Message</th>
<th  class="hidden-xs hidden-sm visible-md visible-lg">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.EventTime</th>
<th  class="col-xs-4 col-sm-3 col-md-2 col-lg-2"></th></tr>
</thead>
<tbody>
    @if (Model != null && Model.StatusOfResult == Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK)
    {
		int index = 0;
        foreach (var item in Model.Result)
        {
			index++;
<tr><td  class="hidden-xs visible-sm"></td>
<td >@Html.ActionLink(item.Build_1_Name, UrlStringsAlias.ActionName_Build_WPEntityRelatedOfBuild, UrlStringsAlias.ControllerName_Build, new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.BuildId }, null)</td>
<td >@Html.ActionLink(item.Solution_1_Name, UrlStringsAlias.ActionName_Solution_WPEntityRelatedOfSolution, UrlStringsAlias.ControllerName_Solution, new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.Solution_1Id }, null)</td>
<td >@Html.ActionLink(item.BuildEventCode_1_Name, UrlStringsAlias.ActionName_BuildEventCode_WPEntityRelatedOfBuildEventCode, UrlStringsAlias.ControllerName_BuildEventCode, new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.BuildEventCodeId }, null)</td>
<td >@Html.DisplayFor(modelItem => item.Message)</td>
<td >@Html.DisplayFor(modelItem => item.EventTime)</td>
<td  class="col-xs-4 col-sm-3 col-md-2 col-lg-2"><div class="btn-group btn-group-justified" role="group" aria-label="...">
<div class="btn-group">
	<a href="@Url.Action(UrlStringsAlias.ActionName_BuildLog_WPEntityRelatedOfBuildLog, UrlStringsAlias.ControllerName_BuildLog, new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.Id })" class="btn btn-default" role="button" type="button" name="FullDetailsToolBarRightInList" title="@Framework.Resources.UIStringResource.FullDetailsAlternativeText">
		<span class="glyphicon glyphicon-briefcase"></span>
	</a>
</div>
<div class="btn-group">
    <a href="@Url.Action(UrlStringsAlias.ActionName_BuildLog_Edit, UrlStringsAlias.ControllerName_BuildLog, new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.Id })" class="btn btn-default" role="button" type="button" name="EditToolBarRightInList" title="@Framework.Resources.UIStringResource.EditAlternativeText">
        <span class="glyphicon glyphicon-edit"></span>
    </a>
</div>
</div></td></tr>
        }
    }
    else
    {
<tr><td colspan="50" ><div class="text-danger">@Model.StatusMessageOfResult</div>
</td></tr>
    }
</tbody>
</table>
            </div>
            <div class="pull-right">
    @if (Model.Result != null)
    {
        var pagedResult = (PagedList.StaticPagedList<MSBuildLogsExtended.DataSourceEntities.BuildLog.Default>)ViewBag.StaticPagedResult;
        <text>
            @Html.PagedListPager(pagedResult, currentPage => Url.Action(UrlStringsAlias.ActionName_BuildLog_WPCommonOfBuildLog, new { currentPage = currentPage }), PagedList.Mvc.PagedListRenderOptions.OnlyShowFivePagesAtATime)
        </text>
    }
            </div>
        </div>
 </div>
 </div>
@section Scripts {
    <script type="text/javascript">
        $(document).ready($(function() {
            $('input[name=upperBoundEventTimeCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            $('input[name=lowerBoundEventTimeCommonOftOfCommon]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
            // Daterangepicker init
            $(function() {
                $('input[rangepickername="datefilter"]').daterangepicker({
                    autoUpdateInput: false,
                    locale: {
                                cancelLabel: 'Clear'
                            },
                    ranges: {
                               'Today': [moment(), moment()],
                               'Yesterday': [moment().subtract(1, 'days'), moment().subtract(1, 'days')],
                               'Last 7 Days': [moment().subtract(6, 'days'), moment()],
                               'Last 30 Days': [moment().subtract(29, 'days'), moment()],
                               'This Month': [moment().startOf('month'), moment().endOf('month')],
                               'Last Month': [moment().subtract(1, 'month').startOf('month'), moment().subtract(1, 'month').endOf('month')]
                            }
                });
                $('input[rangepickername="datefilter"]').on('apply.daterangepicker', function(ev, picker) {
                    var filterCheckbox = $(this).siblings(".input-group-addon").children('input');
                    if (filterCheckbox.prop( "checked", false )) {
                        filterCheckbox.trigger('click');
                    }
                    $(this).val(picker.startDate.format('MM/DD/YYYY') + ' - ' + picker.endDate.format('MM/DD/YYYY'));
                    $(this).next().children("input:text").first().val(picker.startDate.format('MM/DD/YYYY'));
                    $(this).next().children("input:text").last().val(picker.endDate.format('MM/DD/YYYY'));
                });
                $('input[rangepickername="datefilter"]').on('cancel.daterangepicker', function(ev, picker) {
                    $(this).val('');
                    var filterCheckbox = $(this).siblings(".input-group-addon").children('input');
                    if (filterCheckbox.prop( "checked" )) {
                        filterCheckbox.trigger('click');
                    }
                    $(this).next().children("input:text").first().val(picker.startDate.format('MM/DD/YYYY'));
                    $(this).next().children("input:text").last().val(picker.endDate.format('MM/DD/YYYY'));
                });
                // Set daterange to reflect hidden inputs
                $('input[rangepickername="datefilter"]').each(function(){
                    var startDate = $(this).next().children("input:text").first().val()
                    var endDate = $(this).next().children("input:text").last().val()
                    if (startDate != '1/1/0001 12:00:00 AM') {
                        $(this).data('daterangepicker').setStartDate( startDate );
                    }
                    if (endDate != '1/1/0001 12:00:00 AM') {
                        $(this).data('daterangepicker').setEndDate( endDate );
                    }
                });
            });
        }));
        $(document).ready($(function() {
            $.validator.addMethod(
                "date",
                function(value, element) {
                    var bits = value.match(/([0-9]+)/gi), str;
                    if (!bits)
                        return this.optional(element) || false;
                    str = bits[1] + '/' + bits[0] + '/' + bits[2];
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(str));
                },
                "Please enter a date in the format dd/mm/yyyy"
            );
            $("form").validate({
                onkeyup: false,
                errorPlacement: function(error, element) {
                    if (element.attr("name").indexOf("DOB") >= 0) {
                        error.insertAfter("#DOB_Day");
                    } else {
                        error.insertAfter(element);
                    }
                },
                rules: {
                    upperBoundEventTimeCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    },
                    lowerBoundEventTimeCommonOftOfCommon: {
                        //required: true,
                        date: true,
                        range: ['1900-01-01', '2100-01-01']
                    },
                },
                messages: {
                    upperBoundEventTimeCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    },
                    lowerBoundEventTimeCommonOftOfCommon: {
                        //required: 'Email is required',
                        date: 'Please enter a date in the format dd/mm/yyyy',
                    },
                },
                highlight:
                    function(element) {
                        $(element).css('border', '2px solid red');
                    },
                unhighlight:
                    function(element) {
                        $(element).css('border', '1px solid rgb(170, 170, 170)');
                    },
                errorLabelContainer: "#ErrorList",
                wrapper: "li",
            });
        }));
        function FetchBuild_1() {
			var selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly = $("#Criteria_ValueToCompareIdCommonOfSolution_1OfCommon").val();
            var url = "/api/BuildApi/GetCollectionOfNameValuePairOfByFKOnly";
            var params = BuildCriteriaForFetchBuild_1(selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly);
            if(selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly)
            {
                $.getJSON(url, params, function (data) {
                    objVM.selectListOfvalueToCompareIdCommonOfBuild_1OfCommon(data);
                    if(0 != @(Model.Criteria.ValueToCompareIdCommonOfBuild_1OfCommon.HasValue ? Model.Criteria.ValueToCompareIdCommonOfBuild_1OfCommon.Value : default(System.Int64)))
                    {
                        objVM.selectedvalueToCompareIdCommonOfBuild_1OfCommon(@Model.Criteria.ValueToCompareIdCommonOfBuild_1OfCommon);
                    }
                });
            }
        }
        function BuildCriteriaForFetchBuild_1(selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly) {
            var params = {
                isToCompareIdByFKOnlyOfSolution_1OfByFKOnly: true,
                valueToCompareIdByFKOnlyOfSolution_1OfByFKOnly: selectedvalueToCompareIdByFKOnlyOfSolution_1OfByFKOnly,
                currentIndex: -1,
                pageSize: -1,
                queryOrderByExpression: null
            };
            return params;
        }
        //cascaded dropdownlist by knockoutjs
        function CascadingDDLViewModel() {
            var self = this;
            self.selectListOfvalueToCompareIdCommonOfBuild_1OfCommon = ko.observableArray([]);
            self.selectedvalueToCompareIdCommonOfBuild_1OfCommon = ko.observable();
        }
        var objVM = new CascadingDDLViewModel();
        ko.applyBindings(objVM);
$("#Criteria_ValueToCompareValueToCompareIdCommonOfSolution_1OfCommon").change();
    </script>
}
