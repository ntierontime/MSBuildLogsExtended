@model MSBuildLogsExtended.DataSourceEntities.BuildLog.Default
@{
    ViewBag.Title = Framework.Resources.UIStringResource.AddNewAlternativeText;
}
@section featured {
    <section class="featured">
        <div class="content-wrapper">
            <hgroup class="title">
                <h2>@ViewBag.Title.</h2>
                <h4>@ViewBag.Message</h4>
            </hgroup>
        </div>
    </section>
}
@using (Html.BeginForm()) {
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    <fieldset>
        <legend>@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.BuildLog.</legend>
@Html.HiddenFor(model => model.Build_B1_1_Name)@Html.HiddenFor(model => model.Id)        <div class="editor-label">
			@Html.LabelFor(model => model.Solution_S1_1Id)
        </div>
        <div class="editor-field">
			@Html.DropDownListFor(model => model.Solution_S1_1Id, (List<SelectListItem>)ViewBag.SelectListOfMSBuildLogsExtended_Solution, MSBuildLogsExtended.Resources.UIStringResourcePerEntitySolution.Please_select_Solution____, new Dictionary<string,Object>{ { "onchange", "FetchBuild_B1_1();" } })
        </div>
@Html.HiddenFor(model => model.Solution_S1_1_Name)@Html.HiddenFor(model => model.BuildEventCode_B2_1_Name)        <div class="editor-label">
			@Html.LabelFor(model => model.BuildId)
        </div>
        <div class="editor-field">
			@Html.DropDownListFor(model => model.BuildId, Enumerable.Empty<SelectListItem>(), MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuild.Please_select_Build____, new Dictionary<string,Object>{ { "data-bind", string.Format(@"options:selectListOfBuildId,optionsCaption:'{0}',optionsText:'name',optionsValue:'value',value:selectedBuildId", MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuild.Please_select_Build____) } })
        </div>
        <div class="editor-label">
			@Html.LabelFor(model => model.BuildEventCodeId)
        </div>
        <div class="editor-field">
			@Html.DropDownListFor(model => model.BuildEventCodeId, (List<SelectListItem>)ViewBag.SelectListOfMSBuildLogsExtended_BuildEventCode, MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildEventCode.Please_select_BuildEventCode____)
        </div>
        <div class="editor-label">
			@Html.LabelFor(model => model.Message)
        </div>
        <div class="editor-field">
			@Html.EditorFor(model => model.Message)
        </div>
        <div class="editor-label">
			@Html.LabelFor(model => model.EventTime)
        </div>
        <div class="editor-field">
			@Html.TextBoxFor(model => model.EventTime, new { @Value = Model.EventTime.ToString("dd/MM/yyyy") })
        </div>
        <div class="buttonContainer">
			<input type="submit" value="@Framework.Resources.UIStringResource.AddNewAlternativeText" class="button" />
			<input type="button" value="@Framework.Resources.UIStringResource.RefreshAlternativeText" class="button" onclick="location.href='@Url.Action("Create")'" />
			<input type="button" value="@Framework.Resources.UIStringResource.BackAlternativeText" class="button" onclick="location.href='@Url.Action("Index")'" />
        </div>
    </fieldset>
}
@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/dataTables")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        //http://www.softfinity.com/blog/using-ajax-with-knockout-js-and-asp-net-mvc-4-to-load-select-drop-down-options/
        $(document).ready($(function() {
            $('input[name=EventTime]').datepicker({
                autoclose: true,
                beforeShowDay: $.noop,
                calendarWeeks: false,
                clearBtn: false,
                daysOfWeekDisabled: [],
                endDate: Infinity,
                forceParse: true,
                format: 'dd/mm/yyyy',
                keyboardNavigation: true,
                language: 'en',
                minViewMode: 0,
                orientation: 'auto',
                rtl: false,
                startDate: -Infinity,
                startView: 2,
                todayBtn: false,
                todayHighlight: false,
                weekStart: 0
            });
        }));
        $(document).ready($(function() {
            $.validator.addMethod(
                "date",
                function(value, element) {
                    var bits = value.match(/([0-9]+)/gi), str;
                    if (!bits)
                        return this.optional(element) || false;
                    str = bits[1] + '/' + bits[0] + '/' + bits[2];
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(str));
                },
                "Please enter a date in the format dd/mm/yyyy"
            );
            $("form").validate({
                onkeyup: false,
                errorPlacement: function(error, element) {
                    if (element.attr("name").indexOf("DOB") >= 0) {
                        error.insertAfter("#DOB_Day");
                    } else {
                        error.insertAfter(element);
                    }
                },
                rules: {
                },
                messages: {
                },
                highlight:
                    function(element) {
                        $(element).css('border', '2px solid red');
                    },
                unhighlight:
                    function(element) {
                        $(element).css('border', '1px solid rgb(170, 170, 170)');
                    },
                errorLabelContainer: "#ErrorList",
                wrapper: "li",
            });
        }));
        function FetchBuild_B1_1() {
var selectedvalueToCompareIdByFKOnlyOfSolution_S1_1OfByFKOnly = $("#Solution_S1_1Id").val();
            var url = "/api/BuildApi/GetCollectionOfNameValuePairOfByFKOnly";
            var params = BuildCriteriaForFetchBuild_B1_1(selectedvalueToCompareIdByFKOnlyOfSolution_S1_1OfByFKOnly);
            if(selectedvalueToCompareIdByFKOnlyOfSolution_S1_1OfByFKOnly)
            {
                $.getJSON(url, params, function (data) {
                    objVM.selectListOfBuildId(data);
                    objVM.selectedBuildId(@Model.BuildId);
                });
            }
        }
        function BuildCriteriaForFetchBuild_B1_1(selectedvalueToCompareIdByFKOnlyOfSolution_S1_1OfByFKOnly) {
            var params = {
                isToCompareIdByFKOnlyOfSolution_S1_1OfByFKOnly: true,
                valueToCompareIdByFKOnlyOfSolution_S1_1OfByFKOnly: selectedvalueToCompareIdByFKOnlyOfSolution_S1_1OfByFKOnly,
                currentIndex: -1,
                pageSize: -1,
                queryOrderByExpression: null
            };
            return params;
        }
        //cascaded dropdownlist by knockoutjs
        function CascadingDDLViewModel() {
            var self = this;
            self.selectListOfBuildId = ko.observableArray([]);
            self.selectedBuildId = ko.observable();
        }
        $(document).ready($(function() {
            var objVM = new CascadingDDLViewModel();
            ko.applyBindings(objVM);
$("#Solution_S1_1Id").change();
        }));
    </script>
}