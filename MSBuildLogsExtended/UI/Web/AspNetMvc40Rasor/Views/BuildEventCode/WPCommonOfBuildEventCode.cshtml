@using Framework.Mvc;
@model MSBuildLogsExtended.AspNetMvc40ViewModel.WPCommonOfBuildEventCodeVM
@{
    // http://www.asp.net/mvc/overview/getting-started/getting-started-with-ef-using-mvc/sorting-filtering-and-paging-with-the-entity-framework-in-an-asp-net-mvc-application
    // http://dotnetmentors.com/mvc/paging-and-sorting-in-asp-net-mvc-and-entity-framework-application.aspx
    ViewBag.Title = MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildEventCode.BuildEventCode;
    RouteValueDictionary queryStringDictionary = new RouteValueDictionary(Request.QueryString.AllKeys.ToDictionary(key => key, key => (object)Request.QueryString[key]));
}
@section featured {
<hgroup>
    <h2>@ViewBag.Title.</h2>
    <h4>@ViewBag.Message</h4>
</hgroup>
}
@using (Html.BeginForm())
{
    <div class="btn-group btn-group-justified">
        <div class="btn-group" role="group">
            <button class="btn btn-primary button-Search" type="submit" name="SearchToolBarUp">@Framework.Resources.UIStringResource.SearchAlternativeText</button>
        </div>
        <div class="btn-group" role="group">
            <button onclick="location.href='@Url.Action("AddNew", "BuildEventCode")'" class="btn btn-default button-AddNew" name="AddNewToolBarUp">@Framework.Resources.UIStringResource.AddNewAlternativeText</button>
        </div>
        <div class="btn-group" role="group">
            <button onclick="location.href='@Url.Action("WPCommonOfBuildEventCode_Export", "BuildEventCode", new RouteValueDictionary { { "dataServiceType", "Csv" } })'" class="btn btn-default button-Export" name="ExportToolBarUp">@Framework.Resources.UIStringResource.ExportAlternativeText</button>
        </div>
        <div class="btn-group" role="group">
            <button onclick="location.href='@Url.Action("WPCommonOfBuildEventCode_Export", "BuildEventCode", new RouteValueDictionary { { "dataServiceType", "Excel2010" } })'" class="btn btn-default button-ExportToExcel" name="ExportToExcelToolBarUp">@Framework.Resources.UIStringResource.ExportToExcelAlternativeText</button>
        </div>
        <div class="btn-group" role="group">
            <button onclick="location.href='@Url.Action("Import", "BuildEventCode")'" class="btn btn-default button-Import" name="ImportToolBarUp">@Framework.Resources.UIStringResource.ImportAlternativeText</button>
        </div>
    </div>
    <div class="form-group">
        <div class="checkbox">
            @Html.CheckBoxFor(model => model.Criteria.IsToCompareDescriptionCommonOftOfCommon, new { @class="styled" })
            @Html.LabelFor(model => model.Criteria.ValueToBeContainedDescriptionCommonOftOfCommon)
        </div>
        @Html.TextBoxFor(model => model.Criteria.ValueToBeContainedDescriptionCommonOftOfCommon, new { @class = "form-control" })
    </div>
    <div class="form-group">
        <div class="checkbox checkbox-info checkbox-circle">
            @Html.CheckBoxFor(model => model.Criteria.IsToCompareEventCodeCommonOftOfCommon, new { @class = "styled" })
            @Html.LabelFor(model => model.Criteria.ValueToBeContainedEventCodeCommonOftOfCommon)
        </div>
        @Html.TextBoxFor(model => model.Criteria.ValueToBeContainedEventCodeCommonOftOfCommon, new { style = "display:display;", @class = "form-control" })
    </div>
    <div class="form-group">
        <div class="paging-label">Items per page : </div><div class="paging-field">
            @Html.DropDownListFor(model => model.QueryPagingSetting.PageSize, Model.SelectListOfPageSize, new Dictionary<string, Object> { { "onchange", "this.form.submit();" } })
        </div><div class="paging-label">Sort by:</div><div class="paging-field">
            @Html.DropDownListFor(model => model.QueryOrderBySettingCollecionInString, Model.SelectListOfQueryOrderBySettingCollecionInString, new Dictionary<string, Object> { { "onchange", "this.form.submit();" } })
        </div><div class="paging-field-right">@Model.QueryPagingSetting.GetPagingInformationString()</div>
    </div>
    <div class="btn-group btn-group-justified">
        <div class="btn-group" role="group">
            <button class="btn btn-primary button-Search" type="submit" name="SearchToolBarUp">@Framework.Resources.UIStringResource.SearchAlternativeText</button>
        </div>
        <div class="btn-group" role="group">
            <button onclick="location.href='@Url.Action("AddNew", "BuildEventCode")'" class="btn btn-default button-AddNew" name="AddNewToolBarUp">@Framework.Resources.UIStringResource.AddNewAlternativeText</button>
        </div>
        <div class="btn-group" role="group">
            <button onclick="location.href='@Url.Action("WPCommonOfBuildEventCode_Export", "BuildEventCode", new RouteValueDictionary { { "dataServiceType", "Csv" } })'" class="btn btn-default button-Export" name="ExportToolBarUp">@Framework.Resources.UIStringResource.ExportAlternativeText</button>
        </div>
        <div class="btn-group" role="group">
            <button onclick="location.href='@Url.Action("WPCommonOfBuildEventCode_Export", "BuildEventCode", new RouteValueDictionary { { "dataServiceType", "Excel2010" } })'" class="btn btn-default button-ExportToExcel" name="ExportToExcelToolBarUp">@Framework.Resources.UIStringResource.ExportToExcelAlternativeText</button>
        </div>
        <div class="btn-group" role="group">
            <button onclick="location.href='@Url.Action("Import", "BuildEventCode")'" class="btn btn-default button-Import" name="ImportToolBarUp">@Framework.Resources.UIStringResource.ImportAlternativeText</button>
        </div>
    </div>
}
<div>
    <div class="default">
        <div>
            @Html.PagedListPager(Url
        , new PagerHtmlRenderer(
                //Constructor mandatory values
                currentPageNumber: Model.QueryPagingSetting.CurrentPage,
                pageSize: Model.QueryPagingSetting.PageSize,
                totalNumberOfItems: Model.QueryPagingSetting.CountOfRecords,
                actionName: "WPCommonOfBuildEventCode",
                controllerName: "BuildEventCode",
                routeValues: new RouteValueDictionary() { { "currentPage", "" } },
                pageRouteValueName: "currentPage")
        {
            //Properties
            PreviousLinkInnerHtml = "<strong>Previous</strong>",
            NextLinkInnerHtml = "<strong>Next<strong>",
            FirstLinkInnerHtml = "<strong>First</strong>",
            LastLinkInnerHtml = "<strong>Last</strong>"
        });
        </div>
        <div>
            <table id="MasterDataControl0" name="MasterDataControl0" class="table">
                <tr>
                    <th class="sorting"></th>
                    <th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildEventCode.EventCode</th>
                    <th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildEventCode.Description</th>
                    <th class="sorting"></th>
                </tr>
                @if (Model != null && Model.StatusOfResult == Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK)
                {
                    int index = 0;
                    foreach (var item in Model.Result)
                    {
                        index++;
                        <tr>
                            <td></td>
                            <td>@Html.DisplayFor(modelItem => item.EventCode)</td>
                            <td>@Html.DisplayFor(modelItem => item.Description)</td>
                            <td>
                                <div class="buttonContainer">
                                    <input onclick="location.href='@Url.Action("WPEntityRelatedOfBuildEventCode", "BuildEventCode", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.Id })'" class="button button-Details" type="button" name="DetailsToolBarRightInList" value="@Framework.Resources.UIStringResource.DetailsAlternativeText" />
                                    <input onclick="location.href='@Url.Action("Edit", "BuildEventCode", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.Id })'" class="button button-Edit" type="button" name="EditToolBarRightInList" value="@Framework.Resources.UIStringResource.EditAlternativeText" />
                                </div>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="50"><div class="error-label">@Model.StatusMessageOfResult</div></td></tr>
                }
            </table>
        </div>
        <div>
            @Html.PagedListPager(Url
        , new PagerHtmlRenderer(
                //Constructor mandatory values
                currentPageNumber: Model.QueryPagingSetting.CurrentPage,
                pageSize: Model.QueryPagingSetting.PageSize,
                totalNumberOfItems: Model.QueryPagingSetting.CountOfRecords,
                actionName: "WPCommonOfBuildEventCode",
                controllerName: "BuildEventCode",
                routeValues: new RouteValueDictionary() { { "currentPage", "" } },
                pageRouteValueName: "currentPage")
        {
            //Properties
            PreviousLinkInnerHtml = "<strong>Previous</strong>",
            NextLinkInnerHtml = "<strong>Next<strong>",
            FirstLinkInnerHtml = "<strong>First</strong>",
            LastLinkInnerHtml = "<strong>Last</strong>"
        });
        </div>
    </div>
</div>

@section Scripts {
    <script type="text/javascript">
        $(document).ready($(function() {
        }));
        $(document).ready($(function() {
            $.validator.addMethod(
                "date",
                function(value, element) {
                    var bits = value.match(/([0-9]+)/gi), str;
                    if (!bits)
                        return this.optional(element) || false;
                    str = bits[1] + '/' + bits[0] + '/' + bits[2];
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(str));
                },
                "Please enter a date in the format dd/mm/yyyy"
            );
            $("form").validate({
                onkeyup: false,
                errorPlacement: function(error, element) {
                    if (element.attr("name").indexOf("DOB") >= 0) {
                        error.insertAfter("#DOB_Day");
                    } else {
                        error.insertAfter(element);
                    }
                },
                rules: {
                },
                messages: {
                },
                highlight:
                    function(element) {
                        $(element).css('border', '2px solid red');
                    },
                unhighlight:
                    function(element) {
                        $(element).css('border', '1px solid rgb(170, 170, 170)');
                    },
                errorLabelContainer: "#ErrorList",
                wrapper: "li",
            });
        }));
        //cascaded dropdownlist by knockoutjs
        function CascadingDDLViewModel() {
            var self = this;
        }
        $(document).ready($(function() {
            var objVM = new CascadingDDLViewModel();
            ko.applyBindings(objVM);
        }));
    </script>
}
