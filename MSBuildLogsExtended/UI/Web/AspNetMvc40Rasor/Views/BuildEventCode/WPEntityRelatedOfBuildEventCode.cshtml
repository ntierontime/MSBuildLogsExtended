@using Framework.Mvc;
@model MSBuildLogsExtended.AspNetMvc40ViewModel.WPEntityRelatedOfBuildEventCodeVM
@{
    // http://www.asp.net/mvc/overview/getting-started/getting-started-with-ef-using-mvc/sorting-filtering-and-paging-with-the-entity-framework-in-an-asp-net-mvc-application
    // http://dotnetmentors.com/mvc/paging-and-sorting-in-asp-net-mvc-and-entity-framework-application.aspx
    ViewBag.Title = MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildEventCode.BuildEventCode;
    RouteValueDictionary queryStringDictionary = new RouteValueDictionary(Request.QueryString.AllKeys.ToDictionary(key => key, key => (object)Request.QueryString[key]));
}
@section featured {
    <div class="panel-heading">
        <hgroup class="title">
            <h2>@ViewBag.Title.</h2>
            <h4>@ViewBag.Message</h4>
        </hgroup>
    </div>
}
<div class="row">
    <div class="col-lg-8 col-md-8 col-sm-8">
        <article class="panel panel-default">
            <div class="panel-heading"><h4>@Html.ActionLink(MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.BuildLog, "WPCommonOfBuildLog", "BuildLog")</h4></div>
            <div class="panel-body">
                <div class="table-responsive">
                    <table id="MasterDataControl0" name="MasterDataControl0" class="table table-striped">
                        <tr>
                            <th class="sorting"></th>
                            <th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.Build_B1_1_Name</th>
                            <th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.Solution_S1_1_Name</th>
                            <th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.BuildEventCode_B2_1_Name</th>
                            <th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.Message</th>
                            <th class="sorting">@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildLog.EventTime</th>
                            <th class="sorting"></th>
                        </tr>
                        @if (Model != null && Model.StatusOfFK_BuildLog_BuildEventCode == Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK)
            {
                int index = 0;
                foreach (var item in Model.FK_BuildLog_BuildEventCode)
                {
                    index++;
                                <tr>
                                    <td></td>
                                    <td>@Html.ActionLink(item.Build_B1_1_Name, "WPEntityRelatedOfBuild", "Build", new { isToCompareIdByIdentifierOftOfByIdentifier = true, valueToCompareIdByIdentifierOftOfByIdentifier = item.BuildId }, null)</td>
                                    <td>@Html.ActionLink(item.Solution_S1_1_Name, "WPEntityRelatedOfSolution", "Solution", new { isToCompareIdByIdentifierOftOfByIdentifier = true, valueToCompareIdByIdentifierOftOfByIdentifier = item.Solution_S1_1Id }, null)</td>
                                    <td>@Html.ActionLink(item.BuildEventCode_B2_1_Name, "WPEntityRelatedOfBuildEventCode", "BuildEventCode", new { isToCompareIdByIdentifierOftOfByIdentifier = true, valueToCompareIdByIdentifierOftOfByIdentifier = item.BuildEventCodeId }, null)</td>
                                    <td>@Html.DisplayFor(modelItem => item.Message)</td>
                                    <td>@Html.DisplayFor(modelItem => item.EventTime)</td>
                                    <td>
                                        <div class="btn-group" role="group">
                                            <input class="btn btn-default" onclick="location.href='@Url.Action("WPEntityRelatedOfBuildLog", "BuildLog", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.Id })'" role="button" type="button" name="DetailsToolBarRightInList" value="@Framework.Resources.UIStringResource.DetailsAlternativeText" />
                                            <input class="btn btn-default" onclick="location.href='@Url.Action("Edit", "BuildLog", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = item.Id })'" role="button" type="button" name="EditToolBarRightInList" value="@Framework.Resources.UIStringResource.EditAlternativeText" />
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr><td colspan="50"><div class="text-danger">@Model.StatusMessageOfFK_BuildLog_BuildEventCode</div></td></tr>
                        }
                    </table>
                </div>
            </div>
        </article>
    </div>
    <div class="col-lg-4 col-md-4 col-sm-4">
        <aside class="panel-group">
            <div class="panel panel-default">
                <div class="panel-heading">
                    <a data-toggle="collapse" href="#collapse1">
                        <h4>@MSBuildLogsExtended.Resources.UIStringResourcePerEntityBuildEventCode.BuildEventCode</h4>
                    </a>
                </div>
                <div id="collapse1" class="panel-collapse collapse in">
                    <div class="panel-body">
                        @if (Model.StatusOfMasterEntity == Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK)
                        { // Item
                            <div class="btn-group" role="group">
                                <input class="btn btn-default" role="button" onclick="location.href='@Url.Action("Edit", "BuildEventCode", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = Model.MasterEntity.Id })'" type="button" name="EditToolBarUp" value="@Framework.Resources.UIStringResource.EditAlternativeText" />
                                <input class="btn btn-default" role="button" onclick="location.href='@Url.Action("AddNew", "BuildEventCode")'" type="button" name="AddNewToolBarUp" value="@Framework.Resources.UIStringResource.AddNewAlternativeText" />
                                <input class="btn btn-default" role="button" onclick="location.href='@Url.Action("Copy", "BuildEventCode", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = Model.MasterEntity.Id })'" type="button" name="CopyToolBarUp" value="@Framework.Resources.UIStringResource.CopyAlternativeText" />
                                <input class="btn btn-default" role="button" onclick="location.href='@Url.Action("Details", "BuildEventCode", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = Model.MasterEntity.Id })'" type="button" name="DetailsToolBarUp" value="@Framework.Resources.UIStringResource.DetailsAlternativeText" />
                                <input class="btn btn-default" role="button" onclick="location.href='@Url.Action("Index", "BuildEventCode")'" type="button" name="GotoSearchToolBarUp" value="@Framework.Resources.UIStringResource.GotoSearchAlternativeText" />
                            </div>
                            <div class="row">
                                @Html.LabelFor(model => model.MasterEntity.Id, new { @class = "col-lg-4 col-md-4 col-sm-4" })
                                @Html.DisplayFor(model => model.MasterEntity.Id)
                            </div>
                            <div class="row">
                                @Html.LabelFor(model => model.MasterEntity.EventCode, new { @class = "col-lg-4 col-md-4 col-sm-4" })
                                @Html.DisplayFor(model => model.MasterEntity.EventCode)
                            </div>
                            <div class="row">
                                @Html.LabelFor(model => model.MasterEntity.Description, new { @class = "col-lg-4 col-md-4 col-sm-4" })
                                @Html.DisplayFor(model => model.MasterEntity.Description)
                            </div>
                        }
                        @if (Model.StatusOfMasterEntity != Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.UIProcessReady && Model.StatusOfMasterEntity != Framework.CommonBLLEntities.BusinessLogicLayerResponseStatus.MessageOK)
                        {
                            <div class="btn-group" role="group">
                                <input class="btn btn-default" onclick="location.href='@Url.Action("AddNew", "BuildEventCode")'" type="button" name="AddNewToolBarUp" value="@Framework.Resources.UIStringResource.AddNewAlternativeText" />
                                <input class="btn btn-default" onclick="location.href='@Url.Action("WPEntityRelatedOfBuildEventCode", "BuildEventCode", new { isToCompareIdByIdentifierOftOfByIdentifier=true, valueToCompareIdByIdentifierOftOfByIdentifier = Model.MasterEntity.Id })'" type="button" name="DetailsToolBarUp" value="@Framework.Resources.UIStringResource.DetailsAlternativeText" />
                                <input class="btn btn-default" onclick="location.href='@Url.Action("Index", "BuildEventCode")'" type="button" name="GotoSearchToolBarUp" value="@Framework.Resources.UIStringResource.GotoSearchAlternativeText" />
                            </div>
                            <div class="text-danger">@Model.StatusMessageOfMasterEntity</div>
                        }

                    </div>
                </div>
            </div>
        </aside>
    </div>
</div>
@section Scripts {
    @Scripts.Render("~/bundles/jqueryui")
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/knockout")
    @Scripts.Render("~/bundles/dataTables")
    @Scripts.Render("~/bundles/bootstrap")
    <script type="text/javascript">
        //http://www.softfinity.com/blog/using-ajax-with-knockout-js-and-asp-net-mvc-4-to-load-select-drop-down-options/
        $(document).ready($(function () {
        }));
        $(document).ready($(function () {
            $.validator.addMethod(
                "date",
                function (value, element) {
                    var bits = value.match(/([0-9]+)/gi), str;
                    if (!bits)
                        return this.optional(element) || false;
                    str = bits[1] + '/' + bits[0] + '/' + bits[2];
                    return this.optional(element) || !/Invalid|NaN/.test(new Date(str));
                },
                "Please enter a date in the format dd/mm/yyyy"
            );
            $("form").validate({
                onkeyup: false,
                errorPlacement: function (error, element) {
                    if (element.attr("name").indexOf("DOB") >= 0) {
                        error.insertAfter("#DOB_Day");
                    } else {
                        error.insertAfter(element);
                    }
                },
                rules: {
                },
                messages: {
                },
                highlight:
                    function (element) {
                        $(element).css('border', '2px solid red');
                    },
                unhighlight:
                    function (element) {
                        $(element).css('border', '1px solid rgb(170, 170, 170)');
                    },
                errorLabelContainer: "#ErrorList",
                wrapper: "li",
            });
        }));
        //cascaded dropdownlist by knockoutjs
        function CascadingDDLViewModel() {
            var self = this;
        }
        $(document).ready($(function () {
            var objVM = new CascadingDDLViewModel();
            ko.applyBindings(objVM);
        }));
    </script>
}
